<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="utf-8" />
  <title>OrbisMesh – Mesh Status</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <!-- Styles orientieren sich an connections.html, ohne Body/Flex zu überschreiben -->
  <style>
    .node-card{background:#1a1a1a;padding:16px;border-radius:8px}
    .peer-list{display:grid;grid-template-columns:repeat(auto-fill,minmax(300px,1fr));gap:16px}
    .peer-card{background:#1a1a1a;padding:16px;border-radius:8px}
    .stats{font-size:14px;margin:8px 0}
    .mode-wifi{color:#4caf50}
    .mode-lora{color:#ff9800}
    a.inline-link{color:inherit;text-decoration:none;margin:0 0 16px 0;display:inline-block}
    a.inline-link:hover{text-decoration:underline}
    @media (max-width:600px){.header img{height:50px!important}}
  </style>

  <script>
    function safe(val, def=''){ return (val===undefined||val===null)?def:val; }

    function updateData(){
      fetch('/api/node-status')
        .then(r=>r.json())
        .then(data=>{
          // Header
          const h1 = document.querySelector('h1');
          if(h1) h1.textContent = safe(data.hostname, 'Mesh Status');

          // BATMAN Mesh Status
          const grid = document.querySelector('.node-grid');
          if(grid){
            grid.innerHTML = '';
            const nodes = data.node_status || {};
            Object.entries(nodes).forEach(([mac, node])=>{
              const modeRaw = safe(node.mode,'').toString();
              const modeClass = 'mode-' + modeRaw.toLowerCase();
              const lastSeen = Number(safe(node.last_seen,0)).toFixed(2);
              const thr = Number(safe(node.throughput,0)).toFixed(1);

              grid.insertAdjacentHTML('beforeend', `
                <div class="node-card">
                  <h3>${safe(node.hostname, mac)}</h3>
                  <div class="stats">${mac}</div>
                  <div class="stats">IP: ${safe(node.ip,'–')}</div>
                  <div class="stats">Mode: <span class="${modeClass}">${modeRaw || '–'}</span></div>
                  <div class="stats">Last Seen: ${lastSeen}s</div>
                  <div class="stats">Throughput: ${thr}</div>
                  <div class="stats">Next Hop: ${safe(node.nexthop,'–')}</div>
                  <div class="stats">Failure Count: ${safe(node.failure_count,0)}</div>
                  <div class="stats">Good Count: ${safe(node.good_count,0)}</div>
                </div>
              `);
            });
          }

          // Reticulum Peers
          const peerList = document.querySelector('.peer-list');
          if(peerList){
            peerList.innerHTML = '';
            const peers = data.peer_discovery || {};
            Object.entries(peers).forEach(([name, peer])=>{
              const secondsAgo = Math.max(0, Math.floor(safe(peer.current_time,0) - safe(peer.last_seen,0)));
              peerList.insertAdjacentHTML('beforeend', `
                <div class="peer-card">
                  <h3>${name}</h3>
                  <div class="stats">Destination Hash: ${safe(peer.destination_hash,'')}</div>
                  <div class="stats">Last Seen: ${secondsAgo} seconds ago</div>
                </div>
              `);
            });
          }

          // nächster Poll
          setTimeout(updateData, 2000);
        })
        .catch(()=>{
          setTimeout(updateData, 2000);
        });
    }

    document.addEventListener('DOMContentLoaded', updateData);
  </script>
  <link rel="stylesheet" href="{{ url_for('static', filename='app.css') }}">
</head>
<body>
  {% set active = 'status' %}
  {% include 'sidebar.html' %}

  <main class="main">
    <div class="header">
      <div style="display:flex;flex-direction:column;align-items:flex-start;flex:1;">
        <h1 style="margin:0;">{{ hostname }}</h1>
      </div>
    </div>

    <a class="inline-link" href="/packet-logs">View Packet Logs →</a>

    <!-- BATMAN Mesh Status -->
    <div class="section">
      <h2>BATMAN Mesh Status</h2>
      <div class="node-grid">
        {% for mac, node in node_status.items() %}
        <div class="node-card">
          <h3>{{ node.hostname|default(mac) }}</h3>
          <div class="stats">{{ mac }}</div>
          <div class="stats">IP: {{ node.ip|default('–') }}</div>
          <div class="stats">Mode:
            <span class="mode-{{ node.mode|default('')|lower }}">{{ node.mode|default('–') }}</span>
          </div>
          <div class="stats">Last Seen: {{ (node.last_seen|default(0)|float)|round(2) }}s</div>
          <div class="stats">Throughput: {{ (node.throughput|default(0)|float)|round(1) }}</div>
          <div class="stats">Next Hop: {{ node.nexthop|default('–') }}</div>
          <div class="stats">Failure Count: {{ node.failure_count|default(0) }}</div>
          <div class="stats">Good Count: {{ node.good_count|default(0) }}</div>
        </div>
        {% endfor %}
      </div>
    </div>

    <!-- Reticulum Peers -->
    <div class="section">
      <h2>Reticulum Peers</h2>
      <div class="peer-list">
        {% for name, peer in peer_discovery.items() %}
        <div class="peer-card">
          <h3>{{ name }}</h3>
          <div class="stats">Destination Hash: {{ peer.destination_hash }}</div>
          <div class="stats">Last Seen: {{ ((peer.current_time|default(0)|float) - (peer.last_seen|default(0)|float))|int }} seconds ago</div>
        </div>
        {% endfor %}
      </div>
    </div>
  </main>
</body>
</html>
